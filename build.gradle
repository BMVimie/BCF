buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

group = 'bzh.bmv'
version = '0.0.1'
sourceCompatibility = 10
def classesJava = "${project.buildDir}/classes/main"
def javasRoot = "${rootProject.rootDir}/src/main/java"
def testClassesJava = "${project.buildDir}/classes/test"
def testJavaRoot = "${rootProject.rootDir}/src/test/java"

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-freemarker')
	// Security
    compile('org.springframework.boot:spring-boot-starter-security')
	//compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.session:spring-session-core')
	// runtime('org.postgresql:postgresql') // to our project
	runtime('mysql:mysql-connector-java')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	// Crypt
	compile group: 'commons-codec', name: 'commons-codec', version: '1.5'
	//import Excel File
	compile group: 'org.apache.poi', name: 'poi', version: '4.0.0'
	compile group: 'org.apache.poi', name: 'openxml4j', version: '1.0-beta'
	
}
test {
    systemProperties 'property': 'value'
    ignoreFailures = true
}
apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "6.13"
}

task checkstyleMain (type: Checkstyle, overwrite: true) {
    ignoreFailures = true
    showViolations = false
    source fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/main.xml"
    }
    classpath = fileTree(classesJava)
    configFile = file("${rootProject.rootDir}/checkstyle_rules.xml")
}

task checkstyleTest (type: Checkstyle, overwrite: true){
    ignoreFailures = true
    showViolations = false
    source fileTree('src/test/java')
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/test.xml"
    }
    classpath = fileTree("$project.buildDir/classes/test/")
    configFile = file("${rootProject.rootDir}/checkstyle_rules.xml")
}

task checkstyleReport << {
    checkType = project.ext.get("checkType")
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$project.buildDir/reports/checkstyle/${checkType}.xml",
            style:"C:/ContinuousIntegration/checkstyle-6.13/checkstyle-noframes-sorted.xsl",
            out:"$project.buildDir/reports/checkstyle/checkstyle_${checkType}.html"
        )
    }
}

task checkstyle(dependsOn:['checkstyleMain', 'checkstyleTest']){
    description 'Runs Checkstyle inspection against Android sourcesets.'
    group = 'Code Quality'
}

gradle.taskGraph.afterTask {Task task, TaskState state ->
    if(state.failure) {
        if (task.name in ['checkstyleMain', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    project.ext.set("checkType", matcher.group(1).toLowerCase())
                }
            }
            checkstyleReport.execute()
        }
    }
}
apply plugin: 'pmd'

task pmdMain(type: Pmd, overwrite: true) {
    ignoreFailures = true
    description 'Runs PMD inspection against Android sourcesets.'
    group = 'Code Quality'
    ruleSetFiles = files("${rootProject.rootDir}/pmd_rules.xml")
    source = fileTree(javasRoot)
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmdTest(type: Pmd, overwrite: true) {
    ignoreFailures = true
    description 'Runs PMD inspection against Android sourcesets.'
    group = 'Code Quality'
    ruleSetFiles = files("${rootProject.rootDir}/pmd_rules.xml")
    source = fileTree(testJavaRoot)
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// add CPD to check
check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml',
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: javasRoot) {
      include(name: '**/*.java')
    }
  }
}


task copyDeps(type: Copy) {
  from configurations.runtime
  into 'libs'
}